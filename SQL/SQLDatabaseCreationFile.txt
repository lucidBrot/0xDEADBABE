-- #### TABLES ####

DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;

-- LECTURE
CREATE TABLE Lecture (
	Lecture_ID serial PRIMARY KEY,
	Name varchar(128) NOT NULL
);
CREATE UNIQUE INDEX UIX_LectureName ON Lecture (Name);

-- USER
CREATE TABLE "User" (
	User_ID serial PRIMARY KEY,
	Nethz_Name varchar(32) NOT NULL	
);
CREATE UNIQUE INDEX UIX_User ON "User" (Nethz_Name);

-- TEACHES
CREATE TABLE Exercise (
	Exercise_ID int PRIMARY KEY,
	Assistant_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Lecture_ID int REFERENCES Lecture ON DELETE CASCADE ON UPDATE CASCADE,
    IsActive boolean NOT NULL DEFAULT True
);

-- COMMENTARY
CREATE TABLE Commentary (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	Title varchar(64) NOT NULL,
	Text varchar(1024) NOT NULL,
	PRIMARY KEY (User_ID, Exercise_ID)
);

-- RATING
CREATE TABLE Rating (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	Field int NOT NULL,
	RatingValue int NOT NULL,
	PRIMARY KEY (User_ID, Exercise_ID)
);

-- ATTENDS
CREATE TABLE Attends (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY (User_ID, Exercise_ID)
);

-- #### FUNCTIONS ####

-- NOTIFY USER LOGIN
CREATE OR REPLACE FUNCTION NotifyUserLogin (nethz varchar(32)) 
RETURNS int AS $$
  DECLARE user_id int;
  BEGIN      
      IF NOT EXISTS(SELECT * FROM "User" WHERE "User".Nethz_Name = nethz)
      THEN		  
          INSERT INTO "User" (Nethz_Name) 
          VALUES (nethz) 
          RETURNING "User".User_ID 
          INTO user_id;
      END IF;
      
      RETURN user_id;
  END; 
$$ LANGUAGE plpgsql;

-- MAKE EXERCISE
CREATE OR REPLACE FUNCTION MakeExercise (nethz varchar(32), lecture_name varchar(128)) 
RETURNS void AS $$
  DECLARE user_id int;
  DECLARE lect_id int;
  BEGIN        
	  SELECT "User".User_ID 
      FROM "User" 
      WHERE "User".Nethz_Name = nethz 
      INTO user_id;
      
      IF user_id is NULL
      THEN
        user_id = NotifyUserLogin(nethz);
      END IF;
      
      SELECT Lecture.Lecture_ID
      FROM Lecture
      WHERE Lecture.Name = lecture_name
      INTO lect_id;
	  
      IF EXISTS (SELECT * FROM Exercise WHERE Exercise.Assistant_ID = user_id AND Exercise.Lecture_ID = lect_id)
      THEN
        UPDATE Exercise 
        SET IsActive = True 
        WHERE Exercise.Assistant_ID = user_id AND Exercise.Lecture_ID = lect_id;
      ELSE
        INSERT INTO Exercise (Assistant_ID, Lecture_ID)
        VALUES (user_id, lecture_id);
      END IF;      
	  
      RETURN;
  END; 
$$ LANGUAGE plpgsql;
																	 
-- CLEAR EXERCISES
CREATE OR REPLACE FUNCTION ClearExercises () 
RETURNS void AS $$
  BEGIN        
	  UPDATE Exercise SET IsActive = False;	  
      RETURN;
  END; 
$$ LANGUAGE plpgsql;                                                                