-- #### TABLES ####

DROP SCHEMA public CASCADE;
CREATE SCHEMA public;

GRANT ALL ON SCHEMA public TO postgres;
GRANT ALL ON SCHEMA public TO public;

-- LECTURE
CREATE TABLE Lecture (
	Lecture_ID serial PRIMARY KEY,
	Name varchar(128) NOT NULL
);
CREATE UNIQUE INDEX UIX_LectureName ON Lecture (Name);

-- USER
CREATE TABLE "User" (
	User_ID serial PRIMARY KEY,
	Nethz_Name varchar(32) NOT NULL	
);
CREATE UNIQUE INDEX UIX_User ON "User" (Nethz_Name);

-- TEACHES
CREATE TABLE Exercise (
	Exercise_ID int PRIMARY KEY,
	Assistant_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Lecture_ID int REFERENCES Lecture ON DELETE CASCADE ON UPDATE CASCADE,
    IsActive boolean NOT NULL DEFAULT True
);

-- COMMENTARY
CREATE TABLE Commentary (
	Commentary_ID int PRIMARY KEY,
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	Title varchar(64) NOT NULL,
	Text varchar(1024) NOT NULL,
	UNIQUE (User_ID, Exercise_ID)
);

-- RATING
CREATE TABLE Rating (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	Field int NOT NULL,
	RatingValue int NOT NULL,
	PRIMARY KEY (User_ID, Exercise_ID)
);

-- RATING
CREATE TABLE CommentaryLike (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Commentary_ID int REFERENCES Commentary ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY (User_ID, Commentary_ID)
);

-- ATTENDS
CREATE TABLE Attends (
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	PRIMARY KEY (User_ID, Exercise_ID)
);

-- #### FUNCTIONS ####

-- NOTIFY USER LOGIN
CREATE OR REPLACE FUNCTION MakeOrGetUser (nethz varchar(32)) 
RETURNS int AS $$
  DECLARE user_id int;
  BEGIN      
      SELECT "User".User_ID FROM "User" WHERE "User".Nethz_Name = nethz INTO user_id;
  
      IF user_id is NULL
      THEN		  
          INSERT INTO "User" (Nethz_Name) 
          VALUES (nethz) 
          RETURNING "User".User_ID 
          INTO user_id;
      END IF;
      
      RETURN user_id;
  END; 
$$ LANGUAGE plpgsql;

-- NOTIFY USER LOGIN
CREATE OR REPLACE FUNCTION MakeOrGetLecture (lecture_name varchar(128)) 
RETURNS int AS $$
  DECLARE lect_id int;
  BEGIN  
      SELECT Lecture.Lecture_ID FROM Lecture WHERE Lecture.Name = lecture_name INTO lect_id;
  
      IF lect_id is NULL
      THEN		  
          INSERT INTO Lecture (Name) 
          VALUES (lecture_name) 
          RETURNING Lecture.Lecture_ID
          INTO lect_id;
      END IF;
      
      RETURN lect_id;
  END; 
$$ LANGUAGE plpgsql;

-- MAKE EXERCISE
CREATE OR REPLACE FUNCTION MakeOrGetExercise (nethz varchar(32), lecture_name varchar(128)) 
RETURNS int AS $$
  DECLARE exer_id int;
  DECLARE user_id int;
  DECLARE lect_id int;
  BEGIN        
	  user_id = MakeOrGetUser(nethz);
      lect_id = MakeOrGetLecture(lecture_name);
      SELECT Exercise.Exercise_ID FROM Exercise WHERE Exercise.Assistant_ID = user_id AND Exercise.Lecture_ID = lect_id INTO exer_id;
	  
      IF exer_id IS NOT NULL
      THEN
        UPDATE Exercise 
        SET IsActive = True 
        WHERE Exercise.Exercise_ID = exer_id;
      ELSE
        INSERT INTO Exercise (Assistant_ID, Lecture_ID)
        VALUES (user_id, lecture_id)
        RETURNING Exercise.Exercise_ID
        INTO exer_id;
      END IF;      
	  
      RETURN exer_id;
  END; 
$$ LANGUAGE plpgsql;
																	 
-- CLEAR EXERCISES
CREATE OR REPLACE FUNCTION ClearExercises () 
RETURNS void AS $$
  BEGIN        
	  UPDATE Exercise SET IsActive = False;	  
      RETURN;
  END; 
$$ LANGUAGE plpgsql;                                                                