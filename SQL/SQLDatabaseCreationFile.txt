-- #### TABLES ####

DROP TABLE IF EXISTS CommentaryLike CASCADE;
DROP TABLE IF EXISTS Commentary CASCADE;
DROP TABLE IF EXISTS Rating CASCADE;
DROP TABLE IF EXISTS RatingField CASCADE;
DROP TABLE IF EXISTS Attendee CASCADE;
DROP TABLE IF EXISTS Teaches CASCADE;
DROP TABLE IF EXISTS Student CASCADE;
DROP TABLE IF EXISTS Assistent CASCADE;
DROP TABLE IF EXISTS Exercise CASCADE;
DROP TABLE IF EXISTS Lecture CASCADE;
DROP TABLE IF EXISTS "User" CASCADE;

-- LECTURE
CREATE TABLE Lecture (
	Lecture_ID serial PRIMARY KEY,
	Name varchar(128) NOT NULL
);
CREATE UNIQUE INDEX UIX_LectureName ON Lecture (Name);

-- USER
CREATE TABLE "User" (
	User_ID serial PRIMARY KEY,
	Nethz_Name varchar(32) NOT NULL	
);
CREATE UNIQUE INDEX UIX_User ON "User" (Nethz_Name);

-- TEACHES
CREATE TABLE Exercise (
	Exercise_ID serial PRIMARY KEY,
	Assistant_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Lecture_ID int REFERENCES Lecture ON DELETE CASCADE ON UPDATE CASCADE,
    IsActive boolean NOT NULL DEFAULT True
);

-- COMMENTARY
CREATE TABLE Commentary (
	Commentary_ID serial PRIMARY KEY,
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	Title varchar(64) NOT NULL,
	Text varchar(1024) NOT NULL,
	UNIQUE (User_ID, Exercise_ID)
);

CREATE TABLE RatingField (
    RatingField_ID serial PRIMARY KEY,
    IsActive boolean NOT NULL DEFAULT TRUE,
    Title varchar (128) NOT NULL
);

-- RATING
CREATE TABLE Rating (
    Rating_ID serial PRIMARY KEY,
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	RatingField_ID int NOT NULL REFERENCES RatingField ON DELETE CASCADE ON UPDATE CASCADE,
	RatingValue int NOT NULL,
	UNIQUE (User_ID, Exercise_ID)
);

-- RATING
CREATE TABLE CommentaryLike (
    CommentaryLike serial PRIMARY KEY,
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Commentary_ID int REFERENCES Commentary ON DELETE CASCADE ON UPDATE CASCADE,
	UNIQUE (User_ID, Commentary_ID)
);

-- ATTENDS
CREATE TABLE Attendee (
    Attendee_ID serial PRIMARY KEY,
	User_ID int REFERENCES "User" ON DELETE CASCADE ON UPDATE CASCADE,
	Exercise_ID int REFERENCES Exercise ON DELETE CASCADE ON UPDATE CASCADE,
	UNIQUE (User_ID, Exercise_ID)
);

-- #### FUNCTIONS ####

DROP FUNCTION IF EXISTS MakeOrGetUser(varchar(32));

-- NOTIFY USER LOGIN
CREATE OR REPLACE FUNCTION MakeOrGetUser (nethz varchar(32)) 
RETURNS int AS $$
  DECLARE user_id int;
  BEGIN      
      SELECT "User".User_ID FROM "User" WHERE "User".Nethz_Name = nethz INTO user_id;
  
      IF user_id is NULL
      THEN		  
          INSERT INTO "User" (Nethz_Name) 
          VALUES (nethz) 
          RETURNING "User".User_ID 
          INTO user_id;
      END IF;
      
      RETURN user_id;
  END; 
$$ LANGUAGE plpgsql;

-- NOTIFY USER LOGIN
CREATE OR REPLACE FUNCTION MakeOrGetLecture (lecture_name varchar(128)) 
RETURNS int AS $$
  DECLARE lect_id int;
  BEGIN  
      SELECT Lecture.Lecture_ID FROM Lecture WHERE Lecture.Name = lecture_name INTO lect_id;
  
      IF lect_id is NULL
      THEN		  
          INSERT INTO Lecture (Name) 
          VALUES (lecture_name) 
          RETURNING Lecture.Lecture_ID
          INTO lect_id;
      END IF;
      
      RETURN lect_id;
  END; 
$$ LANGUAGE plpgsql;

-- MAKE EXERCISE
CREATE OR REPLACE FUNCTION MakeOrGetExercise (nethz varchar(32), lecture_name varchar(128)) 
RETURNS int AS $$
  DECLARE exer_id int;
  DECLARE user_id int;
  DECLARE lect_id int;
  BEGIN        
	  user_id = MakeOrGetUser(nethz);
      lect_id = MakeOrGetLecture(lecture_name);
      SELECT Exercise.Exercise_ID FROM Exercise WHERE Exercise.Assistant_ID = user_id AND Exercise.Lecture_ID = lect_id INTO exer_id;
	  
      IF exer_id IS NOT NULL
      THEN
        UPDATE Exercise 
        SET IsActive = True 
        WHERE Exercise.Exercise_ID = exer_id;
      ELSE
        INSERT INTO Exercise (Assistant_ID, Lecture_ID)
        VALUES (user_id, lect_id)
        RETURNING Exercise.Exercise_ID
        INTO exer_id;
      END IF;      
	  
      RETURN exer_id;
  END; 
$$ LANGUAGE plpgsql;
																	 
-- CLEAR EXERCISES
CREATE OR REPLACE FUNCTION ClearExercises () 
RETURNS void AS $$
  BEGIN        
	  UPDATE Exercise SET IsActive = False;	  
      RETURN;
  END; 
$$ LANGUAGE plpgsql;  

-- GET ACTIVE LECTURES
CREATE OR REPLACE FUNCTION GetActiveLectures () 
RETURNS TABLE (
    Lecture_ID int,
    Name varchar(128)
  )
  AS $$
  BEGIN        
	  RETURN QUERY SELECT Lecture.Lecture_ID, Lecture.Name 
      FROM Lecture
      WHERE EXISTS (SELECT * FROM Exercise 
                    WHERE Exercise.Lecture_ID = Lecture.Lecture_ID AND Exercise.IsActive = True);
                    
      
  END; 
$$ LANGUAGE plpgsql;    

-- GET ACTIVE EXERCISES
CREATE OR REPLACE FUNCTION GetActiveExercises () 
RETURNS TABLE (
    Exercise_ID int,
    Assistant_ID int,
    Assistant_Nethz varchar(32),
    Lecture_ID int,
    Lecture_Name varchar(128)
  )
  AS $$
  BEGIN        
	  RETURN QUERY SELECT Exercise.Exercise_ID, "User".User_ID, "User".Name, Lecture.Lecture_ID, Lecture.Name 
      FROM Exercise
      JOIN "User" ON "User".User_ID = Exercise.Assistant_ID
      JOIN Lecture ON Lecture.Lecture_ID = Exercise.Lecture_ID
      WHERE Exercise.IsActive = True;    
  END; 
$$ LANGUAGE plpgsql; 
                    
DROP FUNCTION IF EXISTS GetExercise(int, int);
                    
-- GET EXERCISE
CREATE OR REPLACE FUNCTION GetExercise (lect_id int, assi_id int) 
RETURNS TABLE (
    Exercise_ID int,
    Assistant_ID int,
    Assistant_Nethz varchar(32),
    Lecture_ID int,
    Lecture_Name varchar(128)
  )
  AS $$
  BEGIN        
	  RETURN QUERY SELECT Exercise.Exercise_ID, "User".User_ID, "User".Name, Lecture.Lecture_ID, Lecture.Name 
      FROM Exercise
      JOIN "User" ON "User".User_ID = Exercise.Assistant_ID
      JOIN Lecture ON Lecture.Lecture_ID = Exercise.Lecture_ID
      WHERE Lecture.Lecture_ID = lect_id AND Exercise.Assistant_ID = assi_id;    
  END; 
$$ LANGUAGE plpgsql; 

DROP FUNCTION IF EXISTS GetExerciseRatings(int);

-- GET EXERCISE RATINGS
CREATE OR REPLACE FUNCTION GetExerciseRatings (exer_id int) 
RETURNS TABLE (
    Exercise_ID int,
    Rating_Title varchar(128),
    Rating_Value float
  )
  AS $$
  BEGIN        
	  RETURN QUERY SELECT Exercise.Exercise_ID, RatingField.Title, avg(Cast(Rating.RatingValue as Float))
      FROM Exercise
      JOIN Rating ON Rating.Exercise_ID = Exercise.Exercise_ID
      JOIN RatingField ON Rating.RatingField_ID = RatingField.RatingField_ID
      WHERE Exercise.Exercise_ID = exer_id AND RatingField.IsActive = TRUE
      GROUP BY RatingField.RatingField_ID;
  END; 
$$ LANGUAGE plpgsql; 

DROP FUNCTION IF EXISTS GetLectureExercise(int);

-- GET LECTURE ASSISTANTS
CREATE OR REPLACE FUNCTION GetLectureExercises (lect_id int) 
RETURNS TABLE (
    Exercise_ID int,
    Assistant_ID int,
    Assistant_Nethz varchar(32),
    Lecture_ID int,
    Lecture_Name varchar(128)
  )
  AS $$
  BEGIN        
	  RETURN QUERY SELECT Exercise.Exercise_ID, "User".User_ID, "User".Name, Lecture.Lecture_ID, Lecture.Name 
      FROM Exercise
      JOIN "User" ON "User".User_ID = Exercise.Assistant_ID
      JOIN Lecture ON Lecture.Lecture_ID = Exercise.Lecture_ID
      WHERE Exercise.IsActive = True AND Lecture.Lecture_ID = lect_id; 
  END; 
$$ LANGUAGE plpgsql; 

